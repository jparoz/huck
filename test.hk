(* foo f g = g (f 1); *)

(* destructure : Structure -> X; *)
(* destructure (Structure x) = x; *)

(* isTrue True = True; *)
(* isTrue _ = False; *)

(* isFive 5 = True; *)
(* isFive _ = False; *)

(* isHello ("Hello!") = True; *)
(* isHello _ = False; *)

(* Cons : A -> B -> Cons; *)
(* head : Cons -> A; *)
(* head (Cons x xs) = x; *)
(* head Nil = undefined; *)

(* head (x::xs) = x; *)
(* head [] = undefined; *)

(* length (x::xs) = 1 + length xs; *)
(* length [] = 0; *)

(* isSingleton [x] = True; *)
(* isSingleton _ = False; *)

(* a + b = add a b; *)

(* oneInt = 1; *)
(* oneFloat = 1.0; *)

(* takesInt 1 = True; *)
(* takesInt _ = False; *)

(* takesFloat 1.0 = True; *)
(* takesFloat _ = False; *)

(* three = let x = 3 in x; *)

(* someTuple = let f = id in (f 3, f True); *)

(* lambda = \x -> x; *)

(*
example1 =
    let id = \x ->
        let y = x in y
    in id id;
*)

example2 =
    \m ->
        let y = m in
            let x = y True in x;

(* foo = \x -> \y -> let z = y in z; *)

(* bar : Int -> Int; *)
bar = \x -> x + 123;

(* t = True; *)

(* id : a -> a; *)
id = \b -> b;

(* @Fixme: *)
(* foo = \x y -> (x (y+100)) - 100; *)
foo = \x y -> (x (y + 100)) - 100;

(* simpleIllTyped = (\x -> x 123) 456; *)

(* infiniteTyped x = x x; *)

(* foo = let a = 123 *)
(*         in let b = a + 456 *)
(*             in let a = "Hello" *)
(*                 in a; *)

(* not True = False; *)
(* not False = True; *)


(* True && True = True; *)
(* _ && _ = False; *)
(* infixr 3 &&; *)

(* False || False = False; *)
(* _ || _ = True; *)
(* infixr 2 ||; *)

(* boolA = (True && False) || True; *)
(* boolB = True && (False || True); *)
(* boolC = True && False || True; *)

(* bothAreTrue a b = a && b; *)


(* infixl 6 +; *)
(* infixl 7 *; *)

numA : Int;
numA = 3 + 4 * 5;

numB : Int = 3 * 4 + 5;


(* valA = valB + 1; *)
(* valB = valA + 1; *)

(* mutualA 0 = 0; *)
(* mutualA x = mutualB x - 1; *)

(* mutualB 0 = 0; *)
(* mutualB x = mutualA x - 1; *)

id : forall a. a -> a;
id a = a;
(* id = \a -> a; *)

const : forall a b. a -> b -> a;
const a b = a;

bar any 0 = 0;
bar x y = x / y;

(* usesUnit : () -> String *)
(* usesUnit () = "foo"; *)

(* returnsUnit : ∀a. a -> () *)
(* returnsUnit x = (); *)

(* unitArgument : ∀a. a -> String *)
(* unitArgument x = usesUnit (); *)

(* compileError : COMPILE ERROR *)
(* compileError x = usesUnit 123; *)

(* baz "hello" = "goodbye"; *)
(* baz s = s ++ "."; *)

(* quux (Just 1) = 1; *)
(* quux (Just x) = x + 2; *)
(* quux Nothing = 123; *)

(* addIfOne [1, x] = 1 + x; *)
(* addIfOne [_, x] = x; *)

(* tuple = (1, "hi"); *)

(* usesTuple (n, s) = (n*2, s .. s); *)

(* callsTheTupleFunctionA = usesTuple (123, "cat"); *)
(* callsTheTupleFunctionB = usesTuple tuple; *)

(* shouldBeLast = shouldBeNext + 123; *)

(* mustComeFirst = 456; *)

(* shouldBeNext = mustComeFirst + 2; *)

(* usesCyclic = cyclicA; *)
(* cyclicA = cyclicB; *)
(* cyclicB = cyclicC; *)
(* cyclicC = cyclicA; *)
